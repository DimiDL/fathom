env:
  es6: true
  node: true
  mocha: true

parserOptions:
  sourceType: module
  ecmaVersion: 8

extends:
  - eslint:recommended
  - plugin:node/recommended

plugins:
  - import
  - node

root: true

rules:
  array-bracket-spacing: [error, never]
  eqeqeq: error
  generator-star-spacing: [warn, {before: true, after: false}]
  guard-for-in: warn  # There's nothing wrong with for..in if you know what you're doing. This is here just to keep me from accidentally saying "for..in" when I mean "for..of". Delete this and come up with a better solution if we ever need to use "for..in".
  indent: [error, 4, {ObjectExpression: first, ArrayExpression: first, CallExpression: {arguments: first}, FunctionDeclaration: {parameters: first}}]
  max-len: [off, {code: 100, ignoreComments: true, ignoreStrings: true, ignoreTemplateLiterals: true}]
  node/exports-style: [error, module.exports]
  node/no-missing-import: [error, {tryExtensions: [".js", ".mjs"]}]
  node/no-unpublished-require: off
  no-console: off
  no-dupe-class-members: error
  no-loop-func: error
  no-new-func: error  # equivalent to eval()
  no-prototype-builtins: off
  no-restricted-globals: [error, getComputedStyle]
  no-throw-literal: error
  no-trailing-spaces: error
  no-underscore-dangle: off
  no-unused-vars: [warn, {vars: all, args: none}]
  no-use-before-define: [error, {functions: false, classes: false}]
  no-useless-escape: error
  no-var: warn
  no-warning-comments: [warn, {terms: [xxx, fixme, hack], location: start}]
  object-curly-spacing: [error, never]
  object-shorthand: [error, properties]
  prefer-const: off
  quotes: [error, single, {avoidEscape: true, allowTemplateLiterals: true}]
  semi: [error, always]
  space-before-blocks: [error, always]
  space-before-function-paren: [error, {anonymous: always, named: never}]
  import/extensions: [error, always, {js: never, mjs: never}]

settings:
  import/resolver:
    node:
      extensions: ['.js', '.mjs']
